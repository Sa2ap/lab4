export default class Setting {
  constructor() {
    this.boxWidth = 800
    this.boxHeight = 500
    // Высота и ширина игрового поля, и всех слоев канваса
    this.boxRound = 20
    // Радиус закругления углов игрового поля
    this.boxColor = '#333333'
    // Серый цвет заливки игрового поля. 
    this.lineWidth = 6
    // Толщина линий
    this.lineColor = '#232323'
    // Цвет линий. Темно-серый, как основной фон окна брузера в CSS
    this.textColor = '#EBEBEB'
    // Светло-серый цвет, используется для текста таймера и бегунка
    this.supportColorRed = '#FA0556'
    this.supportColorYellow = '#FAC405'
    // Вспомогательные красный и желтый цвета,
    // используются для подсветки технических нюансов
    this.ballSpeed = 7
    // Скорость мячика
    this.ballRadius = 8
    // Радиус мячка, диаметр получается 16px
    this.ballXDefault = (this.boxWidth / 2)
    this.ballYDefault = (this.boxHeight / 2)
    // Координаты мячика по умолчанию,
    // равны половине длины и ширины поля, это центр
    this.ballColor = '#EBEBEB'
    // Цвет мячика, я сделал таким же светло-серым как textColor 
    this.ballHitScore = 0
    // Счетчик отбитых мячей, также к нему привязано увеличение
    // скорости мячика. Увеличиваем скорость при каждом ударе
    this.ball = {
      x: this.ballXDefault,
      y: this.ballYDefault,
      // Текущие координаты мячика, которые меняются в процессе
      // игры, изначально они равны дефолтным - мячик в центре поля
      dx: 0,
      dy: 0,
      // Ускорение мячика по осям. Изначально равно 0, но
      // позже получает рандомное значение от 0.8 до 1, с + или - 
      speed: this.ballSpeed,
      // Еще одно значение скорости, оно нужно, т.к. скорость мяча
      // постепено растет и переодически надо ее возвращать
      // к дефолтному this.ballSpeed
    }
      this.playerRadius = 7        
    // Радиус игрока. Правильнее было бы назвать толщиной, т.к.
    // игрок это векторная линия. Но в расчетах столкновений, 
    // я использую крайние точки как окружности, поэтому это радиус.
    // Реальная толщина игрока - это два его радиуса, 14px.
    this.playerHeight = 80
    // Высота игрока. Растояние от верхней до нижней точки игрока.
    // Но т.к. платформы игроков имеют закругления, реальный размер
    // получается на два радиуса больше, 94px
    this.playerSpeed = 8
    // Скорость игрока. Используется как коэффициент для ускорения
    this.playerBorder = this.playerRadius * 3
    // Пространство от краев игрока до стенки сверху и снизу
    this.playerSpace = this.playerRadius * 6
    // Пространство от центра платформы игрока до стенки за ним
    this.playerYDefault =
                   (this.boxHeight / 2) - (this.playerHeight / 2)
    // Изначальная координата игрока Y равна половине высоты
    // игрового поля минус половина высоты игрока, таким образом
    // игрок будет распологаться посередине при любой заданной длине
    this.playerL = {
      score: 0,
      // Счетчик очков
      goalPointX: this.boxWidth - this.playerSpace * 2,
      // Координата Х для появления надписей "+1" на игровом поле
      // Для левого игрока равна ширине поля минус 2 растояния
      // до игрока
      // Таким образо она находится на поле противника, справа
      align: 'right',
      // Параметр определяет выравнивание текста "+1".
      // Я также использую этот параметр для определения стороны
      // в которую полетит мяч после забития гола
      x: this.playerSpace,
      y: this.playerYDefault,
      // Кординаты игрока. X равен заданному растоянию playerSpace,
      // а Y дефолтному значению, общему для обоих игроков
      yDefault: (this.boxHeight / 2) - (this.playerHeight / 2),
      // Зарезервированная переменная со значением Y по умолчанию
      color: '#A55F02',            // Цвет игрока. Оранжевый
      keys: [[87,'up'], [83,'down']],
      // Создаем массив с парами ключ-значение.
      // Номер клавиши и строка
      // с направлением. Узнать номер клавиш можно тут:
      // https://puzzleweb.ru/javascript/char_codes-key_codes.php 
    }        
    this.playerR = {
      score: 0,
      goalPointX: this.playerSpace * 2,
      align: 'left',
      x: this.boxWidth - (this.playerSpace),
      // Координата X для правого игрока равна всей ширине поля,
      // минус заданное растояние playerSpace
      y: this.playerYDefault,
      color: '#38887A',
      // Голубой
      keys: [[38,'up'], [40,'down']],
    }
  }
}